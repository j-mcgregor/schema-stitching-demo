type Blog {
  id: ID!
  title: String
  tagline: String
  body: String
  user: ID
  author: User
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

type Education {
  id: ID
  school: String
  degree: String
  fieldofstudy: String
  from: String
  to: String
  current: Boolean
  description: String
}

input EducationInput {
  id: ID
  school: String
  degree: String
  fieldofstudy: String
  from: String
  to: String
  current: Boolean
  description: String
}

type Experience {
  id: ID
  title: String
  company: String
  location: String
  from: String
  to: String
  current: Boolean
  description: String
}

input ExperienceInput {
  id: ID
  title: String
  company: String
  location: String
  from: String
  to: String
  current: Boolean
  description: String
}

type Mutation {
  registerUser(firstName: String, lastName: String, email: String, password: String, password2: String, bio1: String, bio2: String, bio3: String, tagline: String, avatar: String, linkedInURL: String, twitterURL: String, facebookURL: String): User
  verifyUser(token: String!): User
  loginUser(email: String!, password: String!): String
  updateUser(id: ID!, firstName: String, lastName: String, email: String, password: String, password2: String, bio1: String, bio2: String, bio3: String, tagline: String, avatar: String, linkedInURL: String, twitterURL: String, facebookURL: String): User
  deleteUserRequest: String!
  deleteUser(id: ID!, verificationToken: String!): String
  updatePasswordRequest(email: String!): String
  updatePassword(verificationToken: String!, password: String!, password2: String!): User
  addBlog(title: String, tagline: String, body: String, user: ID): Blog
  updateBlog(id: ID!, title: String, tagline: String, body: String, user: ID): Blog
  deleteBlog(id: ID!, user: ID!): String!
  deleteBlogsByUserId(user: ID!): String!
  addProject(title: String!, tagline: String!, about: String, twitterURL: String, websiteURL: String, facebookURL: String, linkedInURL: String, images: [String], user: ID!): Project
  updateProject(id: ID!, title: String, tagline: String, about: String, twitterURL: String, websiteURL: String, facebookURL: String, linkedInURL: String, images: [String], user: ID!): Project
  deleteProject(id: ID!): String!
  deleteProjectsByAuthorId(user: ID!): String!
  addProfile(experience: [ExperienceInput], education: [EducationInput], skills: [SkillInput], user: ID): Profile
  updateProfile(id: ID!, experience: [ExperienceInput], education: [EducationInput], skills: [SkillInput], user: ID): Profile
  deleteProfile(id: ID!, user: ID!): String!
  deleteProfileByUserId(user: ID!): String!
}

type Profile {
  id: ID
  experience: [Experience]
  education: [Education]
  skills: [Skill]
  user: ID
  author: User
}

type Project {
  id: ID!
  title: String!
  tagline: String!
  about: String!
  twitterURL: String!
  websiteURL: String!
  facebookURL: String!
  linkedInURL: String!
  images: [String]!
  user: ID!
  author: User
}

type Query {
  allUsers: [User]
  user(id: ID!): User
  privateTest(id: ID!): User
  allBlogs: [Blog]
  blog(id: ID!): Blog
  blogsByAuthorId(authorId: ID!): [Blog]
  allProjects: [Project]
  project(id: ID!): Project
  projectsByAuthorId(authorId: ID!): [Project]
  allProfiles: [Profile]
  profile(id: ID): Profile
  profileByUserID(user: ID): Profile
}

type Skill {
  id: ID
  name: String
  level: Int
}

input SkillInput {
  id: ID
  name: String
  level: Int
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  id: ID!
  firstName: String
  lastName: String
  email: String
  password: String
  password2: String
  bio1: String
  bio2: String
  bio3: String
  tagline: String
  avatar: String
  linkedInURL: String
  twitterURL: String
  facebookURL: String
  verificationToken: String
  verified: Boolean
  blogs: [Blog]
  projects: [Project]
  profile: Profile
}

